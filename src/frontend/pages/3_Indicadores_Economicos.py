import streamlit as st
import requests
import json
import datetime
import pandas as pd
import plotly.express as px
import sys
import os

# Adicionar diret√≥rio utils ao path
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from utils.data_processing import process_api_data, calculate_statistics
from utils.ml_models import predict_future_values
from utils.nlp_utils import generate_market_insights, generate_forecast_analysis

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(page_title="Indicadores Econ√¥micos - An√°lise", page_icon="üìà", layout="wide")

st.title("An√°lise de Indicadores Econ√¥micos Chave")
st.markdown("Acompanhe as tend√™ncias e previs√µes para SELIC, IPCA e C√¢mbio fornecidas pela nossa API.")

# --- Fun√ß√£o para buscar dados da API ---
API_BASE_URL = "http://127.0.0.1:8000"

def fetch_api_data(endpoint: str, params: dict = None):
    """Busca dados de um endpoint da API e retorna o JSON, ou None em caso de erro."""
    try:
        response = requests.get(f"{API_BASE_URL}/{endpoint.lstrip('/')}", params=params)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        st.error(f"Erro de conex√£o ao buscar dados de '{endpoint}': {e}")
        return None
    except json.JSONDecodeError:
        st.error(f"Erro ao decodificar JSON da resposta de '{endpoint}'.")
        return None
    except Exception as e:
        st.error(f"Ocorreu um erro inesperado ao buscar dados de '{endpoint}': {e}")
        return None

# --- Se√ß√£o para exibir os indicadores ---
tab_selic, tab_ipca, tab_cambio = st.tabs(["SELIC", "IPCA", "C√¢mbio"])

def display_indicator_data(indicator_name: str, api_endpoint: str, tab_container):
    with tab_container:
        st.header(f"Taxa {indicator_name}")

        # Data atual para refer√™ncia
        data_atual = datetime.date.today()
        
        # --- Filtro de Data --- 
        # Modificado para permitir datas futuras
        selected_date = st.date_input(
            "Selecionar data para a an√°lise:",
            value=data_atual,
            min_value=datetime.date(2000, 1, 1),
            # Permitir at√© 1 ano no futuro
            max_value=data_atual + datetime.timedelta(days=365),
            key=f"date_filter_{api_endpoint}",
            help="Selecione datas passadas para ver dados hist√≥ricos ou datas futuras para previs√µes."
        )
        
        # Informa√ß√£o diferente dependendo se √© data passada ou futura
        if selected_date <= data_atual:
            st.caption(f"A an√°lise de dados hist√≥ricos ser√° carregada para: {selected_date.strftime('%d/%m/%Y')}")
        else:
            dias_futuro = (selected_date - data_atual).days
            st.caption(f"Ser√° gerada uma previs√£o para: {selected_date.strftime('%d/%m/%Y')} ({dias_futuro} dias no futuro)")

        if st.button(f"Carregar An√°lise da {indicator_name} para {selected_date.strftime('%d/%m/%Y')}", key=f"{api_endpoint}_btn_indicadores"):
            # Para qualquer data, precisamos dos dados hist√≥ricos
            with st.spinner(f"Buscando dados hist√≥ricos da {indicator_name}..."):
                historical_data = fetch_api_data(api_endpoint)
            
            if not historical_data:
                st.error(f"N√£o foi poss√≠vel obter dados hist√≥ricos para {indicator_name}.")
                return
                
            # Processar dados
            df = process_api_data(historical_data)
            
            if df is None or df.empty:
                st.error(f"Dados hist√≥ricos insuficientes para an√°lise de {indicator_name}.")
                return

            # FLUXO PARA DATA PASSADA/ATUAL
            if selected_date <= data_atual:
                # Filtrar at√© a data selecionada
                df_filtered = df[df['data'] <= pd.Timestamp(selected_date)]
                
                if df_filtered.empty:
                    st.error(f"N√£o h√° dados dispon√≠veis para {indicator_name} at√© {selected_date.strftime('%d/%m/%Y')}.")
                    return
                
                # Calcular estat√≠sticas
                stats = calculate_statistics(df_filtered)
                
                # Mostrar gr√°fico hist√≥rico
                st.subheader("Dados Hist√≥ricos")
                fig = px.line(df_filtered, x='data', y='valor', title=f"Hist√≥rico - {indicator_name}", 
                line_shape='spline')
                fig.update_traces(mode='lines', line=dict(smoothing=1.3, width=3))
                st.plotly_chart(fig, use_container_width=True)
                
                # Mostrar estat√≠sticas
                st.subheader("Estat√≠sticas Principais")
                col1, col2, col3 = st.columns(3)
                col1.metric("M√©dia", f"{stats['m√©dia']:.2f}")
                col1.metric("M√≠nimo", f"{stats['min']:.2f}")
                col2.metric("Mediana", f"{stats['mediana']:.2f}")
                col2.metric("M√°ximo", f"{stats['max']:.2f}")
                col3.metric("Desvio Padr√£o", f"{stats['desvio_padr√£o']:.2f}")
                col3.metric("Varia√ß√£o Percentual", f"{stats['varia√ß√£o_percentual']:.2f}%")
                
                # Gerar insights de mercado
                st.subheader("An√°lise de Mercado")
                insights = generate_market_insights(df_filtered, indicator_name)
                st.markdown(insights)
            
            # FLUXO PARA DATA FUTURA
            else:
                # Mostrar apenas o gr√°fico hist√≥rico para contexto
                st.subheader("Dados Hist√≥ricos (Contexto)")
                fig = px.line(df, x='data', y='valor', title=f"Hist√≥rico - {indicator_name}", 
                line_shape='spline')
                st.plotly_chart(fig, use_container_width=True)
                
                
                # Pular direto para a se√ß√£o de previs√£o
                st.subheader(f"‚ö° Previs√£o para {selected_date.strftime('%d/%m/%Y')}")
                st.info(f"Gerando modelo preditivo para {dias_futuro} dias no futuro...")
                
                # Gerar previs√£o
                with st.spinner("Processando modelo de machine learning..."):
                    forecast_df = predict_future_values(
                        df,  # Pass DataFrame directly
                        periods=dias_futuro
                    )
    
                
                if forecast_df is not None:
                    # Criar DataFrame combinado para visualiza√ß√£o
                    df_historical = df.copy().tail(30)  # √∫ltimos 30 dias
                    df_historical['tipo'] = 'hist√≥rico'
                    
                    # Obter o √∫ltimo ponto do hist√≥rico para criar conex√£o
                    last_historical_point = df_historical.iloc[-1:].copy()
                    last_historical_point['tipo'] = 'previsto'
                    
                    # Adicionar o √∫ltimo ponto hist√≥rico no in√≠cio da previs√£o
                    forecast_display = forecast_df.copy()
                    forecast_display['tipo'] = 'previsto'
                    forecast_display = pd.concat([last_historical_point, forecast_display])
                    
                    # Combinar os dados
                    combined_df = pd.concat([df_historical, forecast_display])
                    
                    # Mostrar gr√°fico com dados hist√≥ricos e previs√£o
                    st.subheader("Gr√°fico de Previs√£o")
                    fig = px.line(
                        combined_df, 
                        x='data', 
                        y='valor',
                        color='tipo',
                        color_discrete_map={'hist√≥rico': 'blue', 'previsto': 'red'},
                        title=f"Hist√≥rico recente e Previs√£o - {indicator_name}",
                        line_shape='spline'  # Suavizar linhas
                    )
                    fig.update_traces(mode='lines', line=dict(smoothing=1.3, width=3))

                    # Adicionar intervalos de confian√ßa se dispon√≠veis
                    if 'lower_bound' in forecast_df.columns and 'upper_bound' in forecast_df.columns:
                        fig.add_scatter(
                            x=forecast_df['data'],
                            y=forecast_df['lower_bound'],
                            fill=None,
                            mode='lines',
                            line_color='rgba(255,0,0,0.1)',
                            showlegend=False
                        )


                    st.plotly_chart(fig, use_container_width=True)
                    # Mostrar confiabilidade
                    st.subheader("Confiabilidade da Previs√£o")
                    fig_conf = px.line(
                        forecast_df,
                        x='data',
                        y='confiabilidade',
                        title="√çndice de Confiabilidade da Previs√£o",
                        labels={"confiabilidade": "N√≠vel de Confian√ßa", "data": "Data"}
                    )
                    fig_conf.update_layout(yaxis_range=[0, 1])
                    st.plotly_chart(fig_conf, use_container_width=True)
                    
                    # Gerar an√°lise da previs√£o
                    st.subheader("An√°lise da Previs√£o")
                    forecast_analysis = generate_forecast_analysis(forecast_df, indicator_name)
                    st.markdown(forecast_analysis)
                    
                    # Mostrar valores espec√≠ficos da previs√£o
                    st.subheader(f"Valores Previstos para {indicator_name}")
                    target_value = forecast_df.iloc[-1]['valor']
                    target_conf = forecast_df.iloc[-1]['confiabilidade']
                    
                    col1, col2 = st.columns(2)
                    col1.metric(f"Previs√£o para {selected_date.strftime('%d/%m/%Y')}", f"{target_value:.2f}")
                    col2.metric("Confiabilidade", f"{target_conf:.2%}")
                    
                    # Mostrar informa√ß√µes do modelo
                    st.caption("Modelo: DeepSeek (LSTM)")
                    st.caption("‚ö†Ô∏è A confiabilidade da previs√£o diminui com o horizonte temporal")
                else:
                    st.error("N√£o foi poss√≠vel gerar previs√µes para a data selecionada.")

display_indicator_data("SELIC", "selic", tab_selic)
display_indicator_data("IPCA", "ipca", tab_ipca)
display_indicator_data("C√¢mbio", "cambio", tab_cambio)

st.sidebar.info("Navegue pelas abas para ver a an√°lise de cada indicador.")
st.sidebar.warning("Para previs√µes futuras, selecione uma data ap√≥s hoje.")
st.markdown("---")
st.caption("¬© 2025 Instituto de Pesquisa e Estat√≠stica Aplicada. Todos os direitos reservados.")