import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
import plotly.express as px
import sys
import os
from fpdf import FPDF
import json

# Adicionar diret√≥rio utils ao path
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from utils.data_processing import process_api_data, calculate_statistics
from utils.nlp_utils import generate_market_insights
import requests

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(page_title="Gera√ß√£o de Relat√≥rios - IPEA", page_icon="üìä", layout="wide")

# Constantes
API_BASE_URL = "http://backend:8000"
TIPOS_DADOS = {
    "IPCA": "ipca",
    "Taxa SELIC": "selic",
    "C√¢mbio (USD)": "cambio",
    "PIB": "pib",
    "D√≠vida P√∫blica": "divida",
    "Desemprego": "desemprego"
}

EVENTOS_HISTORICOS = {
    "2016": {
        "evento": "Processo de Impeachment",
        "impactos": {
            "ipca": "Redu√ß√£o gradual da infla√ß√£o com nova pol√≠tica econ√¥mica",
            "selic": "In√≠cio de ciclo de redu√ß√£o da taxa b√°sica",
            "cambio": "Alta volatilidade devido √† instabilidade pol√≠tica",
            "pib": "Contra√ß√£o econ√¥mica devido √† instabilidade pol√≠tica",
            "divida": "Aumento da d√≠vida p√∫blica com incertezas pol√≠ticas",
            "desemprego": "Eleva√ß√£o da taxa de desemprego com retra√ß√£o econ√¥mica"
        }
    },
    "2017": {
        "evento": "Retomada Econ√¥mica",
        "impactos": {
            "ipca": "Infla√ß√£o controlada abaixo da meta",
            "selic": "Continuidade do ciclo de queda dos juros",
            "cambio": "Relativa estabilidade com melhora do cen√°rio",
            "pib": "Pequena recupera√ß√£o com retomada gradual do crescimento",
            "divida": "Estabiliza√ß√£o com pol√≠tica fiscal mais restritiva",
            "desemprego": "Lenta recupera√ß√£o do mercado de trabalho"
        }
    },
    "2018": {
        "evento": "Greve dos Caminhoneiros e Elei√ß√µes",
        "impactos": {
            "ipca": "Press√£o inflacion√°ria devido √† crise de abastecimento",
            "selic": "Manuten√ß√£o dos juros em baixa hist√≥rica",
            "cambio": "Forte volatilidade no per√≠odo eleitoral",
            "pib": "Desacelera√ß√£o no crescimento devido a incertezas eleitorais",
            "divida": "Aumento da percep√ß√£o de risco fiscal",
            "desemprego": "Estagna√ß√£o na recupera√ß√£o do emprego"
        }
    },
    "2019": {
        "evento": "Reforma da Previd√™ncia",
        "impactos": {
            "ipca": "Infla√ß√£o controlada com expectativas positivas",
            "selic": "Redu√ß√£o adicional da taxa b√°sica",
            "cambio": "Press√£o com tens√µes comerciais globais",
            "pib": "Crescimento modesto com aprova√ß√£o de reformas",
            "divida": "Expectativa de estabiliza√ß√£o da d√≠vida no longo prazo",
            "desemprego": "Melhora gradual com reformas estruturais"
        }
    },
    "2020": {
        "evento": "Pandemia de COVID-19",
        "impactos": {
            "ipca": "Alta expressiva devido √† desarranjos nas cadeias produtivas e est√≠mulos fiscais",
            "selic": "Redu√ß√£o hist√≥rica para estimular a economia durante a crise sanit√°ria",
            "cambio": "Forte desvaloriza√ß√£o do Real devido √†s incertezas globais",
            "pib": "Contra√ß√£o expressiva devido ao lockdown e crise sanit√°ria",
            "divida": "Expans√£o significativa com gastos emergenciais",
            "desemprego": "Forte alta devido ao fechamento de empresas e setores"
        }
    },
    "2021": {
        "evento": "Crise H√≠drica e Recupera√ß√£o P√≥s-Pandemia",
        "impactos": {
            "ipca": "Press√£o inflacion√°ria com alta da energia e combust√≠veis",
            "selic": "In√≠cio do ciclo de alta para conter infla√ß√£o",
            "cambio": "Volatilidade persistente com cen√°rio internacional",
            "pib": "Recupera√ß√£o parcial com reabertura econ√¥mica",
            "divida": "Tentativa de reequil√≠brio fiscal com retirada de est√≠mulos",
            "desemprego": "Recupera√ß√£o gradual do mercado de trabalho"
        }
    },
    "2022": {
        "evento": "Guerra R√∫ssia-Ucr√¢nia",
        "impactos": {
            "ipca": "Press√£o inflacion√°ria devido √† alta das commodities",
            "selic": "Eleva√ß√£o para conter press√µes inflacion√°rias",
            "cambio": "Volatilidade devido √† instabilidade geopol√≠tica",
            "pib": "Impacto nos pre√ßos de commodities com efeito na produ√ß√£o",
            "divida": "Press√£o por gastos p√∫blicos com elei√ß√µes",
            "desemprego": "Melhora gradual com recupera√ß√£o econ√¥mica"
        }
    },
    "2023": {
        "evento": "Transi√ß√£o de Governo",
        "impactos": {
            "ipca": "Tend√™ncia de estabiliza√ß√£o com nova pol√≠tica econ√¥mica",
            "selic": "In√≠cio do ciclo de redu√ß√µes graduais",
            "cambio": "Oscila√ß√µes devido a mudan√ßas na pol√≠tica econ√¥mica",
            "pib": "Crescimento moderado com nova pol√≠tica econ√¥mica",
            "divida": "Discuss√£o sobre novo arcabou√ßo fiscal",
            "desemprego": "Redu√ß√£o gradual com pol√≠ticas de emprego"
        }
    },
    "2024": {
        "evento": "Nova Pol√≠tica Econ√¥mica",
        "impactos": {
            "ipca": "Continuidade do controle inflacion√°rio",
            "selic": "Ciclo de redu√ß√£o gradual dos juros",
            "cambio": "Busca por estabiliza√ß√£o com novo cen√°rio",
            "pib": "Potencial de acelera√ß√£o do crescimento com reformas",
            "divida": "Consolida√ß√£o do arcabou√ßo fiscal",
            "desemprego": "Melhoria estrutural do mercado de trabalho"
        }
    }
}

st.title("üìä Relat√≥rios Anal√≠ticos Detalhados")
st.markdown("Gere relat√≥rios aprofundados com an√°lise hist√≥rica, tend√™ncias e proje√ß√µes.")

# Interface principal
col1, col2 = st.columns(2)

with col1:
    tipo_dado = st.selectbox(
        "Selecione o indicador:",
        options=list(TIPOS_DADOS.keys())
    )
    
    # Data atual para limite
    data_atual = datetime.now().date()
    
    # Sele√ß√£o de datas com limite
    data_inicial = st.date_input(
        "Data Inicial da An√°lise",
        value=data_atual - timedelta(days=90),
        min_value=datetime(2016, 1, 1).date(),  # Limite inferior: 2016
        max_value=data_atual
    )
    
    data_final = st.date_input(
        "Data Final da An√°lise",
        value=data_atual,
        min_value=data_inicial,
        max_value=data_atual
    )

with col2:
    tipo_analise = st.multiselect(
        "Incluir na an√°lise:",
        ["Contexto Hist√≥rico", "An√°lise de Tend√™ncias", "Impacto Econ√¥mico"],
        default=["Contexto Hist√≥rico", "An√°lise de Tend√™ncias"]
    )
    
    incluir_graficos = st.checkbox("Incluir gr√°ficos", value=True)
    analise_detalhada = st.checkbox("An√°lise detalhada de fatores", value=True)

def format_indicator_value(value, indicator_name):
    """
    Formata o valor do indicador de acordo com seu tipo
    """
    indicator = indicator_name.upper()
    
    if indicator == "TAXA SELIC":
        return f"{value:.2f}%"
    elif indicator == "IPCA":
        return f"{value:.2f}%"
    elif indicator == "C√ÇMBIO (USD)":
        return f"R$ {value:.2f}"
    elif indicator == "PIB":
        # Converter para trilh√µes considerando que o valor est√° em milh√µes de bilh√µes
        valor_trilhoes = value / 1000000
        return f"R$ {valor_trilhoes:.2f} tri"
    elif indicator == "D√çVIDA P√öBLICA":
        if value >= 1000:
            return f"R$ {value/1000:.2f} tri"
        else:
            return f"R$ {value:.2f} bi"
    elif indicator == "DESEMPREGO":
        return f"{value:.2f}%"
    else:
        return f"{value:.2f}"

def get_historical_data(endpoint: str, start_date: datetime, end_date: datetime):
    """Busca dados hist√≥ricos da API"""
    try:
        response = requests.get(
            f"{API_BASE_URL}/{endpoint}",
            params={
                "start_date": start_date.strftime("%Y-%m-%d"),
                "end_date": end_date.strftime("%Y-%m-%d")
            }
        )
        response.raise_for_status()
        return response.json()
    except Exception as e:
        st.error(f"Erro ao buscar dados: {str(e)}")
        return None

def generate_context_analysis(start_date, end_date, indicator):
    """Gera an√°lise contextual do per√≠odo"""
    anos = range(start_date.year, end_date.year + 1)
    contexto = []
    
    for ano in anos:
        if str(ano) in EVENTOS_HISTORICOS:
            evento = EVENTOS_HISTORICOS[str(ano)]
            contexto.append(f"""
### {ano} - {evento['evento']}
{evento['impactos'].get(indicator.lower(), 'Sem impacto significativo registrado')}
""")
    
    return "\n".join(contexto) if contexto else "Sem eventos hist√≥ricos significativos registrados para este per√≠odo."

class RelatorioPDF(FPDF):
    def header(self):
        self.set_font('Arial', 'B', 15)
        self.cell(0, 10, 'Relat√≥rio Anal√≠tico - IPEA', 0, 1, 'C')
        self.ln(10)
        
    def footer(self):
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.cell(0, 10, f'P√°gina {self.page_no()}', 0, 0, 'C')

def generate_pdf_report(report_data):
    pdf = RelatorioPDF()
    pdf.add_page()
    
    # T√≠tulo
    pdf.set_font('Arial', 'B', 16)
    pdf.cell(0, 10, report_data["titulo"], 0, 1)
    pdf.ln(5)
    
    # Per√≠odo
    pdf.set_font('Arial', 'I', 12)
    pdf.cell(0, 10, f"Per√≠odo: {report_data['periodo']}", 0, 1)
    pdf.ln(10)
    
    # Se√ß√µes
    for section_title, content in report_data["secoes"].items():
        pdf.set_font('Arial', 'B', 14)
        pdf.cell(0, 10, section_title.title(), 0, 1)
        pdf.ln(5)
        
        pdf.set_font('Arial', '', 12)
        pdf.multi_cell(0, 10, content)
        pdf.ln(10)
    
    return pdf.output(dest='S').encode('latin1')

def convert_to_percentage(df, indicator_name):
    """Converte valores para o formato adequado"""
    df = df.copy()
    if 'valor' in df.columns:
        df['valor'] = df['valor'].astype(float)
    return df

# Bot√£o para gerar relat√≥rio
if st.button("Gerar Relat√≥rio Detalhado"):
    with st.spinner("Analisando dados e gerando relat√≥rio..."):
        # Buscar dados
        data = get_historical_data(
            TIPOS_DADOS[tipo_dado],
            data_inicial,
            data_final
        )
        
        if data:
            # Processar dados
            df = process_api_data(data)
            df = convert_to_percentage(df, tipo_dado)
            
            if df is not None and not df.empty:
                # Mostrar t√≠tulo e per√≠odo logo no in√≠cio
                st.markdown(f"# An√°lise: {tipo_dado}")
                st.markdown(f"*Per√≠odo: {data_inicial.strftime('%d/%m/%Y')} a {data_final.strftime('%d/%m/%Y')}*")
                st.markdown("---")
                
                # Estat√≠sticas
                stats = calculate_statistics(df)
                
                # Gerar insights
                market_insights = generate_market_insights(df, tipo_dado)
                
                # Preparar se√ß√µes do relat√≥rio
                report_sections = {}
                
                if "Contexto Hist√≥rico" in tipo_analise:
                    st.subheader("üìÖ Contexto Hist√≥rico")
                    contexto = generate_context_analysis(data_inicial, data_final, TIPOS_DADOS[tipo_dado])
                    st.markdown(contexto)
                    report_sections["Contexto Hist√≥rico"] = contexto
                
                if "An√°lise de Tend√™ncias" in tipo_analise:
                    st.subheader("üìà An√°lise de Tend√™ncias")
                    
                    # Formatar valores conforme o tipo de indicador
                    valor_inicial = df['valor'].iloc[0]
                    valor_final = df['valor'].iloc[-1]
                    media_periodo = df['valor'].mean()
                    variacao = valor_final - valor_inicial
                    
                    tendencias = f"""
                    An√°lise do per√≠odo {data_inicial.strftime('%d/%m/%Y')} a {data_final.strftime('%d/%m/%Y')}:
                    
                    - Valor inicial: {format_indicator_value(valor_inicial, tipo_dado)}
                    - Valor final: {format_indicator_value(valor_final, tipo_dado)}
                    - Varia√ß√£o total: {format_indicator_value(variacao, tipo_dado)}
                    - M√©dia do per√≠odo: {format_indicator_value(media_periodo, tipo_dado)}
                    
                    {market_insights}
                    """
                    st.markdown(tendencias)
                    report_sections["An√°lise de Tend√™ncias"] = tendencias
                
                if "Impacto Econ√¥mico" in tipo_analise:
                    st.subheader("üí∞ Impacto Econ√¥mico")
                    
                    # Personalizar o impacto econ√¥mico com base no tipo de indicador
                    impactos_especificos = {
                        "IPCA": {
                            "macro": "Influ√™ncia na pol√≠tica monet√°ria e metas de infla√ß√£o",
                            "setores": "Impacto no planejamento de pre√ßos e contratos",
                            "populacao": "Eros√£o do poder de compra e planejamento familiar"
                        },
                        "Taxa SELIC": {
                            "macro": "Determinante para o custo do cr√©dito e investimentos",
                            "setores": "Influ√™ncia no financiamento empresarial e expans√£o",
                            "populacao": "Impacto no cr√©dito pessoal e financiamentos imobili√°rios"
                        },
                        "C√¢mbio (USD)": {
                            "macro": "Balan√ßa comercial e ingresso de investimentos",
                            "setores": "Importa√ß√£o de insumos e exporta√ß√£o de produtos",
                            "populacao": "Pre√ßo de produtos importados e viagens internacionais"
                        },
                        "PIB": {
                            "macro": "Indicador central da atividade econ√¥mica do pa√≠s",
                            "setores": "Ambiente para expans√£o e novos neg√≥cios",
                            "populacao": "Gera√ß√£o de empregos e renda"
                        },
                        "D√≠vida P√∫blica": {
                            "macro": "Sustentabilidade fiscal e rating soberano",
                            "setores": "Crowding out e press√£o sobre juros futuros",
                            "populacao": "Impacto no or√ßamento para pol√≠ticas p√∫blicas"
                        },
                        "Desemprego": {
                            "macro": "Capacidade produtiva e demanda agregada",
                            "setores": "Disponibilidade de m√£o de obra e press√£o salarial",
                            "populacao": "Renda familiar e desigualdade social"
                        }
                    }
                    
                    impacto_especifico = impactos_especificos.get(tipo_dado, {
                        "macro": "Influ√™ncia na pol√≠tica econ√¥mica",
                        "setores": "Impacto nos custos de produ√ß√£o",
                        "populacao": "Efeito no custo de vida"
                    })
                    
                    impacto = f"""
                    Principais Impactos do {tipo_dado}
                    
                    1. No cen√°rio macroecon√¥mico:
                       - {impacto_especifico["macro"]}
                       - Efeitos nas decis√µes de pol√≠tica econ√¥mica
                       - Impacto na confian√ßa dos investidores
                    
                    2. Nos setores produtivos:
                       - {impacto_especifico["setores"]}
                       - Competitividade nacional e internacional
                       - Decis√µes de investimento e expans√£o
                    
                    3. Para a popula√ß√£o:
                       - {impacto_especifico["populacao"]}
                       - Perspectivas de emprego e renda
                       - Planejamento financeiro familiar
                    """
                    st.markdown(impacto)
                    report_sections["Impacto Econ√¥mico"] = impacto
                
                # Mostrar relat√≥rio
                st.success("Relat√≥rio gerado com sucesso!")
                
                # Gr√°ficos
                if incluir_graficos:
                    st.subheader("üìä An√°lise Gr√°fica")
                    
                    # Para PIB, criarmos uma c√≥pia do DataFrame com valores em trilh√µes
                    df_plot = df.copy()
                    if tipo_dado == "PIB":
                        # Dividir valores por 1 milh√£o para converter para trilh√µes
                        # Considerando que os valores originais est√£o na casa dos milh√µes de bilh√µes
                        df_plot['valor'] = df_plot['valor'] / 1000000
                        
                        # Log para debug
                        st.write(f"Valor m√©dio original: {df['valor'].mean()}")
                        st.write(f"Valor m√©dio ajustado: {df_plot['valor'].mean()}")
                    
                    # Gr√°fico hist√≥rico
                    fig = px.line(
                        df_plot, 
                        x='data', 
                        y='valor',
                        title=f"Hist√≥rico - {tipo_dado}",
                        line_shape='spline'
                    )
                    fig.update_traces(mode='lines', line=dict(smoothing=1.3, width=3))
                    
                    # Personalizar o formato do eixo Y conforme o indicador
                    if tipo_dado in ["IPCA", "Taxa SELIC", "Desemprego"]:
                        fig.update_layout(
                            yaxis_title="Valor (%)",
                            yaxis_ticksuffix="%"
                        )
                    elif tipo_dado == "C√¢mbio (USD)":
                        fig.update_layout(
                            yaxis_title="Valor (R$)",
                            yaxis_tickprefix="R$ "
                        )
                    elif tipo_dado == "PIB":
                        # Valores m√°ximos e m√≠nimos para definir uma escala clara
                        y_min = df_plot['valor'].min() * 0.9  # 10% abaixo do m√≠nimo
                        y_max = df_plot['valor'].max() * 1.1  # 10% acima do m√°ximo
                        
                        fig.update_layout(
                            yaxis_title="Valor (R$ tri)",
                            yaxis=dict(
                                range=[y_min, y_max]
                            )
                        )
                    elif tipo_dado == "D√≠vida P√∫blica":
                        fig.update_layout(
                            yaxis_title="Valor (R$ bi)"
                        )
                    
                    st.plotly_chart(fig, use_container_width=True)
                
                # Bot√µes de download
                col1, col2 = st.columns(2)
                with col1:
                    # PDF download
                    pdf_data = generate_pdf_report({
                        "titulo": f"An√°lise - {tipo_dado}",
                        "periodo": f"{data_inicial.strftime('%d/%m/%Y')} a {data_final.strftime('%d/%m/%Y')}",
                        "secoes": report_sections
                    })
                    
                    st.download_button(
                        label="üì• Download PDF",
                        data=pdf_data,
                        file_name=f"relatorio_{TIPOS_DADOS[tipo_dado]}_{datetime.now().strftime('%Y%m%d')}.pdf",
                        mime="application/pdf"
                    )
                
                with col2:
                    # JSON download (for data analysis)
                    # Convert DataFrame to JSON-serializable format
                    json_data = {
                        "titulo": f"An√°lise - {tipo_dado}",
                        "periodo": f"{data_inicial.strftime('%d/%m/%Y')} a {data_final.strftime('%d/%m/%Y')}",
                        "dados": [{
                            "data": row['data'].strftime('%Y-%m-%d') if pd.notnull(row['data']) else None,
                            "valor": float(row['valor']) if pd.notnull(row['valor']) else None
                        } for _, row in df.iterrows()],
                        "estatisticas": {
                            k: float(v) if isinstance(v, (float, int)) else str(v)
                            for k, v in stats.items()
                        },
                        "secoes": report_sections
                    }
                    
                    st.download_button(
                        label="üìä Download Dados (JSON)",
                        data=json.dumps(json_data, ensure_ascii=False, indent=2),
                        file_name=f"dados_{TIPOS_DADOS[tipo_dado]}_{datetime.now().strftime('%Y%m%d')}.json",
                        mime="application/json"
                    )
            else:
                st.error(f"N√£o foi poss√≠vel processar os dados para {tipo_dado}.")
        else:
            st.error("N√£o foi poss√≠vel obter dados da API. Verifique se o servi√ßo est√° dispon√≠vel.")